//Superclass Volume
String name: name of volume
int size: size of volume in G
UUID uuid: the UUID of the volume

Constructor: parameters String name, int size
initializes all three variables.
initializes the uuid with the generator method.

getter methods for all three variables

setter method for size

UUID generateUUID: generates a uuid and returns it



//Class Drive
String name: name of the hard drive
int size = size of the hard drive

Constructor: parameters String name, int size
initializes both variables

getter methods for both variables

String toString: returns the name and size of the drive



//Subclass PV
Drive drive: associated hard drive of the physical volume
VG vg: associated volume group of the physical volume

Constructor: parameters String name, Drive drive
initializes the drive, uses the super
constructor to initialize the name, size from the drive, and uuid
sets vg to null, initially

getter methods for both variables

setter method for vg

String toString: returns the PV, with size, vg if it exists, and uuid




//Subclass VG
ArrayList<PV> pVList: list of physical volumes the volume group has
ArrayList<LV> lVList: list of logical volumes the volume group has
int freeSpace: the total free space it has (total PV - total LV)

Constructor: parameters String name, PV pv
adds PV to pVList, sets that PV's vg to this, and uses super
constructor to initialize the name, size from PV, and uuid
initializes freeSpace to PV size
sets lVList to an empty list

getter methods for all three variables

void extend: parameters PV pv
takes in new PV and
adds PV to pVList
sets PV's VG to this VG
updates freeSpace

void addLV: parameters LV lv
takes in new LV and adds it to lVList
sets LV's VG to this VG
updates freeSpace

String toString: returns VG,
with size and freeSpace, list of PVs and uuid



//Subclass LV
VG vg: associated volume group of the logical volume

Constructor: parameters String name, int size, VG vg
uses super constructor to initialize name, size, uuid
calls addLV to add LV to the VG

getter method for vg

String toString: returns LV
with size, associated VG, and uuid




//class notRunner
ArrayList<Drive> drives: list of drives created
ArrayList<PV> pvs: list of pvs created
ArrayList<VG> vgs: list of vgs created
ArrayList<LV> lvs: list of lvs created

String createDrive: parameters String name, int size
calls checkList to see if drive with name is already installed
if so, stop and report an error
else, creates a Drive with parameters, adds this Drive to drives list
and returns a success message

String createPV: parameters String name, String driveName
iterates through list drives to check if a drive with driveName as name exists
if so, calls checkDrive to make sure the drive can be used and calls checkList to see if name is unique
if drive can be used, construct a PV with name and that drive
and adds this PV to pvs list
and return a success message
if not, stop and report an error

String createVG: parameters String name, String pvName
iterates through list pvs to check if a pv with pvName as name exists
if so, calls checkPV to make sure the PV can be added and calls checkList to see if name is unique
if PV can be used, construct a VG with name and that PV
and adds this VG to vgs
and return a success message
if not, stop and report an error

String extendVG: parameters String vgName, String pvName
iterates through vgs list to check if a VG with name vgName exists
if so, iterates through pvs list to check if a PV with name pvName exists
if yes, calls checkPV to check if PV can be added with checkList and calls checkList to see if name is unique
and call extend method with that VG and that PV
and return a success message
otherwise, stop and report an error

String createLV: parameters String name, int size, String vgName
iterates through vgs list to check if a VG with name vgName exists
if so, calls checkVG to see if VG can be modified and calls checkList to see if name is unique
if yes, creates LV with parameters and adds LV to lvs
else, stop and report an error

void printDrives: prints each Drive information

void printPVs: creates an equivalent object list to pvs, calls sortByVG to sort pvs,
and prints each PV information

void printVG: prints each VG information

void printLV: creates an equivalent object list to lvs, calls sortByVG to sort lvs,
and prints each LV information

boolean checkList: parameters String name, String type
iterates through type list to see if a type with name the same as parameter name exists
returns true if so, false otherwise

boolean checkDrive: parameters Drive drive
checks to make sure the drive does not belong to another PV
returns true if it doesn't, false otherwise

boolean checkPV: parameters PV pv
checks if inputted PV does not belong to another VG
returns true if it doesn't, false otherwise

boolean checkVG: parameters VG vg itn size
checks if inputted VG exists
and if its freeSpace >= size
returns true if it does, false otherwise

boolean checkLV: parameters LV lv
checks if inputted LV exists and if its size <= freeSpace of VG
returns true if it does, false otherwise

void sortByVG: parameters ArrayList<Object> list, String type
sorts list by VG, type-casted with type

//Runner
-constructs a notRunner instance
-prints welcome message
-prompts the user for command
-for each command, execute corresponding method from notRunner
-while command is not 'exit', repeat last two steps