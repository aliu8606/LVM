//Superclass Volume
String name: name of volume
int size: size of volume in G
UUID uuid: the UUID of the volume

Constructor: parameters String name, int size
initializes all three variables.
initializes the uuid with the generator method.

getter methods for all three variables

setter method for size

UUID generateUUID: generates a uuid and returns it



//Class Drive
String name: name of the hard drive
int size = size of the hard drive

Constructor: parameters String name, int size
initializes both variables

getter methods for both variables

String toString: returns the name and size of the drive



//Subclass PV
Drive drive: associated hard drive of the physical volume
VG vg: associated volume group of the physical volume

Constructor: parameters String name, Drive drive
initializes the drive, uses the super
constructor to initialize the name, size from the drive, and uuid
sets vg to null, initially

getter methods for both variables

setter method for vg

String toString: returns the PV, with size, vg if it exists, and uuid




//Subclass VG
ArrayList<PV> pVList: list of physical volumes the volume group has
ArrayList<LV> lVList: list of logical volumes the volume group has
int freeSpace: the total free space it has (total PV - total LV)

Constructor: parameters String name, PV pv
adds PV to pVList, and uses super
constructor to initialize the name, size from PV, and uuid
initializes freeSpace to PV size
sets lVList to an empty list

getter methods for all three variables

void extend: parameters PV pv
takes in new PV and
adds PV to pVList
sets PV's VG to this VG
updates freeSpace

void addLV: parameters LV lv
takes in new LV and adds it to lVList
sets LV's VG to this VG
updates freeSpace

String toString: returns VG,
with size and freeSpace, list of PVs and uuid



//Subclass LV
VG vg: associated volume group of the logical volume

Constructor: parameters String name, int size, VG vg
uses super constructor to initialize name, size, uuid
calls addLV to add LV to the VG

getter and setter method for vg

String toString: returns LV
with size, associated VG, and uuid




//class notRunner
ArrayList<Drive> drives: list of drives created
ArrayList<PV> pvs: list of pvs created
ArrayList<VG> vgs: list of vgs created
ArrayList<LV> lvs: list of lvs created

void createDrive: parameters String name, int size
calls checkList to see if drive with name is already installed
if so, stop and report an error
else, creates a Drive with parameters
adds Drive to drives

void createPV: parameters String name, Drive drive
calls checkDrive to make sure the drive can be used
and checks that name is unique to this PV with checkList
if not, stop and report an error
else, creates a PV with parameters
and adds PV to pvs

void createVG: parameters String name, PV pv
calls checkPV to make sure the PV can be added
and checks that name is unique to this VG with checkLis
if not, stop and report an error
else, creates VG with parameters
and adds VG to vgs

void extendVG: parameters VG vg PV pv
calls checkPV to check if PV can be added with checkList
if not, stop and report an error
else, call extend method with parameters

void createLV: parameters String name, int size, VG vg
calls checkVG to see if VG can be modified
and checks that name is unique to this LV with checkList
if not, stop and report an error
else, creates LV with parameters
and adds LV to lvs

void printDrives: prints each Drive information

void printPVs: prints each PV information sorted by VG

void printVG: prints each VG information

void printLV: prints each LV information sorted by VG

boolean checkList: parameters ArrayList list, String name
checks if objects in list has the same name as name
returns true if yes, false otherwise **four versions for each object

boolean checkDrive: parameters Drive drive
checks to make sure the drive exists in list
and does not belong to another PV
returns true if it exists and have not committed yet, false otherwise

boolean checkPV: parameters PV pv
checks if inputted PV exists
and does not belong to another VG
returns true if it exists and have not committed yet, false otherwise

boolean checkVG: parameters VG vg itn size
checks if inputted VG exists
and if its freeSpace >= size
returns true if it does, false otherwise

boolean checkLV: parameters LV lv
checks if inputted LV exists and if its size <= freeSpace of VG
returns true if it does, false otherwise

void sortByVG: sorts list by vg **two versions for PV and LV

//Runner
-constructs a notRunner instance
-prints welcome message
-prompts the user for command
-for each command, execute corresponding method from notRunner
-while command is not 'exit', repeat last two steps